/**
  extensions is an Array and each item has such format:
  {firstName: 'xxx', lastName: 'xxx', ext: 'xxx', extType: 'xxx'}
  lastName, ext can be empty, extType can only has "DigitalUser", "VirtualUser","FaxUser","Dept","AO".
**/

/**
  Question 1: sort extensions by "firstName" + "lastName" + "ext" ASC
**/
function sortExtensionsByName(extensions) {
	return extensions.sort(sortRules());
}

//排序函数
function sortRules(){
	var firstName='firstName',
	    lastName='lastName',
	    ext='ext';
	return function(a,b){
		var v1=a[firstName],
			v2=b[firstName],
			v3=a[lastName],
			v4=b[lastName],
			v5=a[ext],
			v6=b[ext];
		if(v1<v2){
			return -1;
		}else if(v1>v2){
			return 1;
		}else{
			if(v3<v4){
				return -1;
			}else if(v3>v4){
				return 1;
			}else{
				if(v5<v6){
					return -1;
				}else if(v5>v6){
					return 1;
				}else{
					return 0;
				}
			}
		}
	};
}

//数据模拟
var arr=[
	{firstName: 'vv', lastName: 'bt', ext: 'other1', extType: 'VirtualUser'},
	{firstName: 'vv', lastName: 'bt', ext: 'other0', extType: 'VirtualUser'},
	{firstName: 'mm', lastName: 'ak', ext: '', extType: 'DigitalUser'},
	{firstName: 'gg', lastName: '', ext: 'hello word', extType: 'FaxUser'},
	{firstName: 'ww', lastName: 'rr', ext: 'day day study', extType: 'Dept'},
	{firstName: 'vv', lastName: 'at', ext: 'other', extType: 'AO'}
];

console.log(sortExtensionsByName(arr));


/**
  Question 2: sort extensions by extType follow these orders ASC
  DigitalUser < VitrualUser < FaxUser < AO < Dept.
**/
function sortExtensionsByExtType(extensions) {
	return extensions.sort(sortRules());
}
//枚举-用到排序中
var orders={
	DigitalUser:0,
	VitrualUser:1,
	FaxUser:2,
	AO:3,
	Dept:4
}
//排序函数
function sortRules(){
	var extType='extType';
	return function(a,b){
		var v1=orders[a[extType]],
			v2=orders[b[extType]];
		if(v1<v2){
			return -1;
		}else if(v1>v2){
			return 1;
		}else{
			return 0
		}
	};
}

//数据模拟
var arr=[
	{firstName: 'vv', lastName: 'bt', ext: 'other1', extType: 'VitrualUser'},
	{firstName: 'vv', lastName: 'bt', ext: 'other0', extType: 'VitrualUser'},
	{firstName: 'mm', lastName: 'ak', ext: '', extType: 'DigitalUser'},
	{firstName: 'gg', lastName: '', ext: 'hello word', extType: 'FaxUser'},
	{firstName: 'ww', lastName: 'rr', ext: 'day day study', extType: 'Dept'},
	{firstName: 'vv', lastName: 'at', ext: 'other', extType: 'AO'}
];

console.log(sortExtensionsByExtType(arr));


/**
  saleItems is an Array has each item has such format:
  {
	month: n, //[1-12],
	date: n, //[1-31],
	transationId: "xxx",
	salePrice: number
  }
**/

/**
  Question 3: write a function to calculate and return a list of total sales (sum) for each quarter, expected result like:
  [
  	{quarter: 1, totalPrices: xxx, transactionNums: n},
  	{....}
  ]
**/

function sumByQuarter(saleItems) {
	var obj={
			spring:{quarter: 1, totalPrices: 0, transactionNums: 0},
			summer:{quarter: 2, totalPrices: 0, transactionNums: 0},
			autumn:{quarter: 3, totalPrices: 0, transactionNums: 0},
			winter:{quarter: 4, totalPrices: 0, transactionNums: 0}
		},
		newArry=[];//四季度统计
		
	for(var i=0;i<saleItems.length;i++){
		switch(saleItems[i].month){
			case 1:
			case 2:
			case 3:
				obj.spring.totalPrices+=saleItems[i].salePrice;
				obj.spring.transactionNums+=1;
				break;
			case 4:
			case 5:
			case 6:
				obj.summer.totalPrices+=saleItems[i].salePrice;
				obj.summer.transactionNums+=1;
				break;
			case 7:
			case 8:
			case 9:
				obj.autumn.totalPrices+=saleItems[i].salePrice;
				obj.autumn.transactionNums+=1;
				break;
			case 10:
			case 11:
			case 12:
				obj.winter.totalPrices+=saleItems[i].salePrice;
				obj.winter.transactionNums+=1;
				break;
		}
	}
	
	for(var item in obj){
		newArry.push(obj[item]);
	};
	
	return newArry;
}

//数据模拟
var arr=[
	{month: 1,date: 1,transationId: "20170101001",salePrice: 50},
	{month: 1,date: 1,transationId: "20170101002",salePrice: 50},
	{month: 1,date: 3,transationId: "20170101003",salePrice: 70},
	{month: 1,date: 17,transationId: "20170101004",salePrice: 100},
	{month: 1,date: 28,transationId: "20170101005",salePrice: 90},
	{month: 2,date: 1,transationId: "20170101006",salePrice: 50},
	{month: 3,date: 1,transationId: "20170101007",salePrice: 50},
	{month: 4,date: 3,transationId: "20170101008",salePrice: 70},
	{month: 5,date: 17,transationId: "20170101009",salePrice: 100},
	{month: 6,date: 28,transationId: "20170101010",salePrice: 90},
	{month: 7,date: 28,transationId: "20170101011",salePrice: 90},
	{month: 8,date: 28,transationId: "20170101012",salePrice: 90},
	{month: 9,date: 28,transationId: "20170101013",salePrice: 90},
	{month: 10,date: 28,transationId: "20170101014",salePrice: 90},
	{month: 11,date: 28,transationId: "20170101015",salePrice: 90},
	{month: 12,date: 28,transationId: "20170101016",salePrice: 90}
];

console.log(sumByQuarter(arr));

/**
  Question 4: write a function to calculate and return a list of average sales for each quarter, expected result like:
  [
    {quarter: 1, averagePrices: xxx, transactionNums: n},
    {....}
  ]
**/

function averageByQuarter(saleItems) {
	var obj={
				spring:{quarter: 1, totalPrices: 0, transactionNums: 0},
				summer:{quarter: 2, totalPrices: 0, transactionNums: 0},
				autumn:{quarter: 3, totalPrices: 0, transactionNums: 0},
				winter:{quarter: 4, totalPrices: 0, transactionNums: 0}
			},
			newArry=[],//四季度统计-每季度总销量
			newAvgArry=[];//四季度统计-平均销量-这边业务未说明具体哪年，默认每个月30天计算（平均总量保留两位小数）
			
	for(var i=0;i<saleItems.length;i++){
		switch(saleItems[i].month){
			case 1:
			case 2:
			case 3:
				obj.spring.totalPrices+=saleItems[i].salePrice;
				obj.spring.transactionNums+=1;
				break;
			case 4:
			case 5:
			case 6:
				obj.summer.totalPrices+=saleItems[i].salePrice;
				obj.summer.transactionNums+=1;
				break;
			case 7:
			case 8:
			case 9:
				obj.autumn.totalPrices+=saleItems[i].salePrice;
				obj.autumn.transactionNums+=1;
				break;
			case 10:
			case 11:
			case 12:
				obj.winter.totalPrices+=saleItems[i].salePrice;
				obj.winter.transactionNums+=1;
				break;
		}
	}
	
	for(var item in obj){
		newArry.push(obj[item]);
	};
	for(var j=0;j<newArry.length;j++){
		newAvgArry.push({
			quarter: newArry[j].quarter, 
			averagePrices: (newArry[j].totalPrices/90).toFixed(2), 
			transactionNums: newArry[j].transactionNums
		})
	};
	
	return newAvgArry;
}

//数据模拟
var arr=[
	{month: 1,date: 1,transationId: "20170101001",salePrice: 50},
	{month: 1,date: 1,transationId: "20170101002",salePrice: 50},
	{month: 1,date: 3,transationId: "20170101003",salePrice: 70},
	{month: 1,date: 17,transationId: "20170101004",salePrice: 100},
	{month: 1,date: 28,transationId: "20170101005",salePrice: 90},
	{month: 2,date: 1,transationId: "20170101006",salePrice: 50},
	{month: 3,date: 1,transationId: "20170101007",salePrice: 50},
	{month: 4,date: 3,transationId: "20170101008",salePrice: 70},
	{month: 5,date: 17,transationId: "20170101009",salePrice: 100},
	{month: 6,date: 28,transationId: "20170101010",salePrice: 90},
	{month: 7,date: 28,transationId: "20170101011",salePrice: 90},
	{month: 8,date: 28,transationId: "20170101012",salePrice: 90},
	{month: 9,date: 28,transationId: "20170101013",salePrice: 90},
	{month: 10,date: 28,transationId: "20170101014",salePrice: 90},
	{month: 11,date: 28,transationId: "20170101015",salePrice: 90},
	{month: 12,date: 28,transationId: "20170101016",salePrice: 90}
];

console.log(averageByQuarter(arr));


/**
  Question 5: please create a tool to generate Sequence
  Expected to be used like:
  var sequence1 = new Sequence();
  sequence1.next() --> return 1;
  sequence1.next() --> return 2;
  
  in another module:
  var sequence2 = new Sequence();
  sequence2.next() --> 3;
  sequence2.next() --> 4;
**/

//每次调用next 累加1
var vl=0
function Sequence(){
	this.next = function () {
		vl+=1
		return vl;
	};
}


var sequence1 = new Sequence();
var a=sequence1.next() 
var b=sequence1.next()
console.log(a)
console.log(b)		

var sequence2 = new Sequence();
var c=sequence2.next() 
var d=sequence2.next()
console.log(c)
console.log(d)	
console.log(sequence2.next())
console.log(sequence1.next())


/**
    Question 6:
    AllKeys: 0-9;
    usedKeys: an array to store all used keys like [2,3,4];
    We want to get an array which contains all the unused keys,in this example it would be: [0,1,5,6,7,8,9]
**/

function getUnUsedKeys(allKeys, usedKeys) {
	var allKeysObjs={},//重新格式所有数组里的值
		usedKeyObjs={},//重新格式已使用的数值里的值
		resultKeys=[];//返回弃除使用过后的所有值
		
	for(var i=0;i<allKeys.length;i++){
		allKeysObjs[allKeys[i]]=allKeys[i];
	}
	
	for(var q=0;q<usedKeys.length;q++){
		usedKeyObjs[usedKeys[q]]=usedKeys[q];
	}
	
	for(var item in allKeysObjs){
		if(allKeysObjs[item]!=usedKeyObjs[item]){
			resultKeys.push(allKeysObjs[item]);
		}
	}
	return resultKeys;
}

console.log(getUnUsedKeys([0,1,2,3,4,5,6,7,8,9],[2,3,4]));





